# -*- coding: utf-8 -*-
"""PM project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b8iaoQhv07Rq0mXmBXDs7NerEhVWNnB0
"""

#!wget https://storage.googleapis.com/tensorflow-1-public/course2/week3/horse-or-human.zip

import tensorflow as tf

import requests

url = "https://storage.googleapis.com/tensorflow-1-public/course2/week3/horse-or-human.zip"
response = requests.get(url)

with open("horse-or-human.zip", "wb") as f:
    f.write(response.content)
    
import subprocess

# Attempt to extract the zip file
try:
    import zipfile
    zip_ref = zipfile.ZipFile('./horse-or-human.zip', 'r')
    zip_ref.extractall('./horse-or-human')
    zip_ref.close()
except EOFError as e:
    print(e)
    print("Extracting zip file failed. Trying to change permissions...")

    # Change permissions using subprocess
    try:
        subprocess.run(['chmod', '666', './horse-or-human.zip'])
        print("Permissions changed successfully. Retrying zip extraction...")

        # Re-attempt extraction after changing permissions
        import zipfile
        zip_ref = zipfile.ZipFile('./horse-or-human.zip', 'r')
        zip_ref.extractall('./horse-or-human')
        zip_ref.close()
    except Exception as e:
        print("Zip extraction failed even after changing permissions.")
        print(e)


import zipfile

# Unzip the dataset
local_zip = './horse-or-human.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('./horse-or-human')
zip_ref.close()

import os

# Directory with our training horse pictures
train_horse_dir = os.path.join('./horse-or-human/horses')

# Directory with our training human pictures
train_human_dir = os.path.join('./horse-or-human/humans')


model = tf.keras.models.Sequential([
    # Note the input shape is the desired size of the image 300x300 with 3 bytes color
    # This is the first convolution
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(300, 300, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    # The second convolution
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # The third convolution
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # The fourth convolution
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # The fifth convolution
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # Flatten the results to feed into a DNN
    tf.keras.layers.Flatten(),
    # 512 neuron hidden layer
    tf.keras.layers.Dense(512, activation='relu'),
    # Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('horses') and 1 for the other ('humans')
    tf.keras.layers.Dense(1, activation='sigmoid')
])

from tensorflow.keras.optimizers import RMSprop

model.compile(loss='binary_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# All images will be rescaled by 1./255
train_datagen = ImageDataGenerator(rescale=1/255)

# Flow training images in batches of 128 using train_datagen generator
train_generator = train_datagen.flow_from_directory(
        './horse-or-human/',  # This is the source directory for training images
        target_size=(300, 300),  # All images will be resized to 300x300
        batch_size=128,
        # Since we use binary_crossentropy loss, we need binary labels
        class_mode='binary')

history = model.fit(
      train_generator,
      steps_per_epoch=8,
      epochs=15,
      verbose=1)

## NOTE: If you are using Safari and this cell throws an error,
## please skip this block and run the next one instead.

import numpy as np
from google.colab import files
from tensorflow.keras.utils import load_img, img_to_array

uploaded = files.upload()

for fn in uploaded.keys():

  # predicting images
  path = '/content/' + fn
  img = load_img(path, target_size=(300, 300))
  x = img_to_array(img)
  x /= 255
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  print(classes[0])

  if classes[0]>0.5:
    print(fn + " is a human")
  else:
    print(fn + " is a horse")

